#!/bin/bash
#
## Wizard Kit: Live Linux Build Tool

# Prep
ROOT_DIR="$(realpath $(dirname "$0"))"
BUILD_DIR="$ROOT_DIR/BUILD_LINUX"
ARCHISO_DIR="$BUILD_DIR/Archiso"
AUR_PACKAGES="$ROOT_DIR/.linux_items/AUR-Packages"
CUSTOM_REPO_DIR="$BUILD_DIR/CustomRepo"
DATE="$(date +%F)"
DATETIME="$(date +%F_%H%M)"
LOG_DIR="$BUILD_DIR/Logs"
OUT_DIR="$ROOT_DIR/OUT_LINUX"
TMP_DIR="$BUILD_DIR/Temp"
if which nano >/dev/null 2>&1; then
    EDITOR=nano
elif which vim >/dev/null 2>&1; then
    EDITOR=vim
else
    EDITOR=vi
fi

function ask() {
    while :; do
        read -p "$1 " -r answer
        if echo "$answer" | egrep -iq '^(y|yes|sure)$'; then
            return 0
        elif echo "$answer" | egrep -iq '^(n|no|nope)$'; then
            return 1
        fi
    done
}
        
function cleanup() {
    for d in "$TMP_DIR" "$ARCHISO_DIR"; do
        if [[ -d "$d" ]]; then
            if ask "Remove: ${d}?"; then
                rm -Rf "$d"
            fi
        fi
    done
}

function copy_settings() {
    # Set main settings
    if [[ ! -e "$BUILD_DIR/MAIN_SETTINGS" ]] || ask "Overwrite MAIN_SETTINGS?"; then
        cp -bv "$ROOT_DIR/.bin/Scripts/settings/main.py" "$BUILD_DIR/MAIN_SETTINGS"
    fi
    read -p "Press Enter to open settings... " -r
    "$EDITOR" "$BUILD_DIR/MAIN_SETTINGS"
}

function update_repo() {
    # Archive current files
    if [[ -d "$CUSTOM_REPO_DIR" ]]; then
        mkdir "$BUILD_DIR/Archive" 2>/dev/null
        archive="$BUILD_DIR/Archive/$(date "+%F_%H%M%S")"
        mv -bv "$CUSTOM_REPO_DIR" "$archive"
    fi
    sleep 1s

    # Build custom repo packages
    mkdir "$CUSTOM_REPO_DIR" 2>/dev/null
    mkdir "$TMP_DIR" 2>/dev/null
    pushd "$TMP_DIR" >/dev/null
    for p in $(cat "$AUR_PACKAGES"); do
        echo "Building: $p"
        curl -LsfO https://aur.archlinux.org/cgit/aur.git/snapshot/$p.tar.gz
        tar xf $p.tar.gz
        pushd $p >/dev/null
        makepkg -s --noconfirm
        popd >/dev/null
        mv -n $p/*xz "$CUSTOM_REPO_DIR"/
    done
    popd >/dev/null

    # Build custom repo database
    pushd "$CUSTOM_REPO_DIR" >/dev/null
    repo-add custom.db.tar.gz *xz
    popd >/dev/null
}

# Prep for build
cleanup
mkdir "$BUILD_DIR" 2>/dev/null
mkdir "$LOG_DIR" 2>/dev/null
mkdir "$OUT_DIR" 2>/dev/null
mkdir "$TMP_DIR" 2>/dev/null

echo "Installing dependancies..."
sudo pacman -Syu --needed --noconfirm archiso attr base-devel curl libewf progsreiserfs rsync
copy_settings
update_repo
rsync -a /usr/share/archiso/configs/releng/ "$ARCHISO_DIR/"

if [[ "$EUID" -eq 0 ]]; then
    ## Elevated section ##
    # Set permissions
    echo "Setting permissions..."
    chown root.root archlive -R
    chmod 700 archlive/airootfs/etc/skel/.ssh
    chmod 600 archlive/airootfs/etc/skel/.ssh/id_rsa

    # Modify build.sh
    if ! grep -iq 'customize_iso' archlive/build.sh; then
        sed -ir 's!run_once make_iso!# customize_iso\ncp -a ${script_path}/extra/* ${work_dir}/iso/\n\nrun_once make_iso!' archlive/build.sh
    fi

    # Build ISO
    ./archlive/build.sh -N "wk-arch" -V "$DATE" -L "WK_ARCH" -w "$TMP_DIR" -o "$OUT_DIR" -v | tee -a "$LOG_DIR/$DATETIME.log"

    # Cleanup
    echo "Removing temp files..."
    rm "$TMP_DIR" -Rf | tee -a "$LOG_DIR/$DATETIME.log"

    echo "Reverting permissions..."
    chown builduser.builduser archlive -R
fi

